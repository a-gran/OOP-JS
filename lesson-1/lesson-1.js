// ТЕОРИЯ

// Причины появления ООП
// 1. Программы стали сложнее и длиннее !!!
// 200 строк
let a = 1
function one() {}
// разбиение на модули - модульность
// 111111 11 1111 111 11
// рефакторинг - изменение, оптимизация кода без создания новых функций
// определение сущностей!!!
// абстрагирование
// ООП - абстракция - модели - параметры (свойствами, методов)
// user (username, password, email)
// user(login(), logout(), ...)
// !!!! абстракции и модели - самое главное в начале

// Наследование
// user - курсы
// user.getCourses
// user.rate
// user.role - админ, студент, модератор
// user (login(), logout() - username, password, email)

// общий предок, только основные свойста и методы, самые ощие для всех потомков
let user = {
  username: '',
  password: '',
  email: '',
  role: ''
  // методы
  // сбросить пароль
  // getCourses(
    if (admin) ...
    if (student) ...
    if (guest) ...
  )
}

// наследование - расширение (класса, сущности)

// admin это раширение user
// наследование от основной сущности
// псевдокод
admin (user) {
  // changeUserStatus()
  // changeUserCourses()
  // перезаписать метод getCourses() {получить все курсы} полиморфизм
}

student (user) {
  // rate
   // перезаписать метод getCourses() {получить курсы конкретного студента} полиморфизм
}

// Полиморфизм

// Инкапсуляция - скрытие каких-то действий от других действий

let course = {
  title: '',
  url: '',
  price: 20.00, // privat, protected Инкапсуляция Данное свойство недоступно при прямом обращении
  // price скрыт от прямого доступа, но просмотр программистом возможен
  getPrice: { return price } // контролируемый доступ
}

cource.price // !!!!!

cource.getPrice() // !!!! 18$ Инкапсуляция Только эта цена через этот метод будет выводится на сайте
